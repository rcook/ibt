#!/usr/bin/env python

import hashlib
import os
import subprocess
import sys

CONTAINER_PROJECT_DIR = "/project"
CONTAINER_DOT_DIR = os.path.join(CONTAINER_PROJECT_DIR, ".ibt")

def docker_image_exists(image_id):
  proc = subprocess.Popen(
    ["docker", "inspect", image_id],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
  proc.communicate()
  return proc.returncode == 0

def docker_image_build(image_id, project_dir):
  if not docker_image_exists(image_id):
    subprocess.check_call(["docker", "build", "-t", image_id, project_dir])

def docker_image_remove(image_id):
  if docker_image_exists(image_id):
    subprocess.check_call(["docker", "rmi", image_id])

class Context(object):
  def __init__(self, dir):
    self._dir = dir
    ibt_file_name = self._find_ibt_file(self._dir)
    if ibt_file_name is None:
      raise RuntimeError("ibt command run outside project")

    self._project_id = hashlib.md5(ibt_file_name).hexdigest()
    self._image_id = "ibt-{}-image".format(self._project_id)
    self._container_id = "ibt-{}-container".format(self._project_id)
    self._project_dir = os.path.dirname(ibt_file_name)
    self._dot_dir = os.path.join(self._project_dir, ".ibt")

  @property
  def dir(self): return self._dir

  @property
  def project_id(self): return self._project_id

  @property
  def image_id(self): return self._image_id

  @property
  def container_id(self): return self._container_id

  @property
  def project_dir(self): return self._project_dir

  @property
  def dot_dir(self): return self._dot_dir

  @staticmethod
  def _find_ibt_file(dir):
    file_name = os.path.join(dir, "Ibtfile")
    if os.path.isfile(file_name):
      return file_name
    parent_dir = os.path.dirname(dir)
    return None if parent_dir == dir else find_ibt_file(parent_dir)

def do_up(ctx, args):
  if len(args) > 0:
    raise RuntimeError("up takes no arguments")

  docker_image_build(ctx.image_id, ctx.project_dir)

  if not os.path.isdir(ctx.dot_dir):
    os.makedirs(ctx.dot_dir)

def do_destroy(ctx, args):
  if len(args) > 0:
    raise RuntimeError("destroy takes no arguments")

  docker_image_remove(ctx.image_id)

def do_run(ctx, args):
  if len(args) == 0:
    raise RuntimeError("run takes one or more arguments")

  rel_dir = os.path.relpath(ctx.dir, ctx.project_dir)

  local_run_path = os.path.join(ctx.dot_dir, "run.sh")
  container_run_path = os.path.join(CONTAINER_DOT_DIR, "run.sh")


  with open(local_run_path, "wt") as f:
    f.write("#!/bin/sh\n")
    f.write("cd {}/{}\n".format(CONTAINER_PROJECT_DIR, rel_dir))
    f.write(" ".join(args) + "\n")

  subprocess.check_call([
    "docker",
    "run",
    "-v",
    "{}:{}".format(ctx.project_dir, CONTAINER_PROJECT_DIR),
    "--rm",
    ctx.image_id,
    "/bin/sh",
    container_run_path
  ])
    
def main(dir, args):
  args.pop(0)
  if len(args) < 1:
    raise RuntimeError("no ibt command specified")

  ctx = Context(dir)

  command = args.pop(0)
  if command == "up":
    do_up(ctx, args)
  elif command == "destroy":
    do_destroy(ctx, args)
  elif command == "run":
    do_run(ctx, args)
  else:
    raise RuntimeError("Unsupported command {}".format(command))

if __name__ == "__main__":
  main(os.getcwd(), list(sys.argv))
